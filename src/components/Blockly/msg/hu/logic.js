export const LOGIC = {

    CONTROLS_IF_ELSEIF_TOOLTIP: "Adjon hozzá egy feltételt az if blokkhoz.",
    CONTROLS_IF_ELSE_TOOLTIP: "Adjunk hozzá egy utolsó, mindenre kiterjedő feltételt az if blokkhoz..",
    CONTROLS_IF_HELPURL: "https://github.com/google/blockly/wiki/IfElse",
    CONTROLS_IF_IF_TOOLTIP: "A blokk újrakonfigurálásához hozzáadhat, eltávolíthat vagy átrendezhet szakaszokat.",
    CONTROLS_IF_MSG_ELSE: "else",
    CONTROLS_IF_MSG_ELSEIF: "else if",
    CONTROLS_IF_MSG_IF: "if",
    CONTROLS_IF_TOOLTIP_1: "Ha egy érték igaz, akkor tegyen néhány utasítást.",
    CONTROLS_IF_TOOLTIP_2: "Ha egy érték igaz, akkor hajtsa végre az első utasításblokkot. Ellenkező esetben a második utasításblokkot kell végrehajtani.",
    CONTROLS_IF_TOOLTIP_3: "Ha az első érték igaz, akkor hajtsa végre az első utasításblokkot. Ellenkező esetben, ha a második érték igaz, akkor a második utasításblokkot kell végrehajtani.",
    CONTROLS_IF_TOOLTIP_4: "Ha az első érték igaz, akkor hajtsa végre az első utasításblokkot. Ellenkező esetben, ha a második érték igaz, akkor a második utasításblokkot kell végrehajtani. Ha egyik érték sem igaz, akkor az utolsó utasításblokkot kell végrehajtani.",
    LOGIC_BOOLEAN_FALSE: "false",
    LOGIC_BOOLEAN_HELPURL: "https://github.com/google/blockly/wiki/Logic#values",
    LOGIC_BOOLEAN_TOOLTIP: "Igaz vagy hamis értéket ad vissza.",
    LOGIC_BOOLEAN_TRUE: "true",
    LOGIC_COMPARE_HELPURL: "https://en.wikipedia.org/wiki/Inequality_(mathematics)",
    LOGIC_COMPARE_TOOLTIP_EQ: "Igazat ad vissza, ha mindkét bemenet egyenlő.",
    LOGIC_COMPARE_TOOLTIP_GT: "Igazat ad vissza, ha az első bemenet nagyobb, mint a második bemenet.",
    LOGIC_COMPARE_TOOLTIP_GTE: "Igazat ad vissza, ha az első bemenet nagyobb vagy egyenlő a második bemenettel.",
    LOGIC_COMPARE_TOOLTIP_LT: "Igazat ad vissza, ha az első bemenet kisebb, mint a második bemenet.",
    LOGIC_COMPARE_TOOLTIP_LTE: "Igazat ad vissza, ha az első bemenet kisebb vagy egyenlő a második bemenettel.",
    LOGIC_COMPARE_TOOLTIP_NEQ: "Igazat ad vissza, ha mindkét bemenet nem egyenlő egymással.",
    LOGIC_NEGATE_HELPURL: "https://github.com/google/blockly/wiki/Logic#not",
    LOGIC_NEGATE_TITLE: "nem %1",
    LOGIC_NEGATE_TOOLTIP: "Igazat ad vissza, ha a bemenet hamis. Visszaadja a false értéket, ha a bemenet igaz.",
    LOGIC_NULL: "null",
    LOGIC_NULL_HELPURL: "https://en.wikipedia.org/wiki/Nullable_type",
    LOGIC_NULL_TOOLTIP: "Visszaadja a null értéket.",
    LOGIC_OPERATION_AND: "and",
    LOGIC_OPERATION_HELPURL: "https://github.com/google/blockly/wiki/Logic#logical-operations",
    LOGIC_OPERATION_OR: "or",
    LOGIC_OPERATION_TOOLTIP_AND: "Igazat ad vissza, ha mindkét bemenet igaz.",
    LOGIC_OPERATION_TOOLTIP_OR: "Igazat ad vissza, ha legalább az egyik bemenet igaz.",
    LOGIC_TERNARY_CONDITION: "test",
    LOGIC_TERNARY_HELPURL: "https://en.wikipedia.org/wiki/%3F:",
    LOGIC_TERNARY_IF_FALSE: "if false",
    LOGIC_TERNARY_IF_TRUE: "if true",
    LOGIC_TERNARY_TOOLTIP: "Ellenőrizze az állapotot a 'teszt' menüben. Ha a feltétel igaz, akkor a 'if true' értéket adja vissza, ellenkező esetben a 'if false' értéket.",


    cases_add: "Ügy",
    cases_condition: "Eset (változó) :",
    cases_do: "Do",
    cases_switch: "Változó",
    cases_tooltip: "Akkor tesz valamit, ha a feltétel igaz. Ha nincs megfelelő eset, akkor az alapértelmezett függvény kerül végrehajtásra.",

}